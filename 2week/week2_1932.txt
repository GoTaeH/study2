1. 문제 해결 기법
    - n 크기의 정수 삼각형을 맨 위층 부터 아래층으로 내려올 때(대각선 왼쪽/오른쪽에서만 선택 가능), 
    선택된 수의 합이 최대가 되는 경로를 구하는 문제이다. 즉, 구할 수 있는 경로의 모든 경우를 저장하면서 
    합이 최대가 되는 경우까지 도달해야하므로 동적 계획법(다이나믹 프로그래밍)을 사용해야 한다.

2. 논리 구현
// 아래층부터 위층으로 합해가는 방식
입력을 받는 버퍼리더 br을 정의한다.
타입이 int인 삼각형의 크기를 나타내는 N을 정의한다.
타입 int 배열 triangle을 생성하여 배열의 요소를 N으로 설정한다. new int[N][N]
타입 int 배열 dp를 생성하여 배열의 요소를 N으로 설정한다. (현재 값 vs 오른쪽 값 : 최댓값을 위층 값과 더해서 저장)

for 반복문을 사용하여 0번째(첫째줄)부터 맨 아래층까지 다음을 반복한다. (int i <- 0~N-1)
    StringTokenizer를 정의하여 입력 받은 문자열을 쪼갠다.
    for 반복문을 사용하여 다음을 반복한다. (int j <- 0~i)
        triangle 배열에 토큰을 저장한다. (triangle[i][j] = Integer.parseInt(st.nextToken()))

for 반복문을 사용하여 다음을 반복한다. (int i <- 0~N-1)
    dp 배열에 삼각형 맨 아래쪽 부터 배열을 저장한다. (dp[N-1][i] = triangle[N-1][i])

for 반복문을 사용하여 다음을 반복한다. (int i <- 2~N) // 두 번째줄까지 반복
    for 반복문을 사용하여 다음을 반복한다. (int j <- 0~N-i)
        dp[N-1][j]배열에 현재 값과 오른쪽 값 중 최대값과 triangle[N-i][j]을 합하여 넣는다.

dp[0][0]을 출력한다. (배열 제일 위층에 있는 값 : 최대값)