1. 문제 해결 기법
    - LCS(최장 공통 부분 수열)을 구하는 문제이다. 문자열을 비교하면서 저장하기 위해서 
    dp를 사용하여 문제를 해결한다. 
    (x번째와 y번째가 같다면 (x-1, y-1)의 LCS길이+1 / 다르면 이전 행 또는 이전 열에서 큰 원소 선택)

2. 논리 구현
버퍼리더 br을 정의한다.

타입이 char인 배열 s1을 정의하여 br에서 받은 문자열을 문자 하나씩 char형으로 넣는다.
타입이 char인 배열 s2를 정의하여 br에서 받은 문자열을 문자 하나씩 char형으로 넣는다.

타입이 int인 len1을 문자 s1의 길이로 정의한다.
타입이 int인 len2를 문자 s2의 길이로 정의한다.

타입이 int인 배열 dp를 int[len1+1][len2+1]로 정의한다. (공집합 나타냄)

for 반복문으로 다음을 반복한다. (int i <- 1~len1)
    for 반복문으로 다음을 반복한다. (int j <- 1~len2)
        if s1[i-1] == s2[j-1]이면 // i-1번째 문자와 j-1번째 문자가 같다면
            dp[i][j] = dp[i-1][j-1]+1 // 대각선 위 (i-1, j-1)의 dp에 +1
        else // 문자가 다르다면 
            Math.max(dp[i-1][j], dp[i][j-1])을 dp[i][j]에 넣는다. // 이전 열, 이전 행 값 중 큰 값
        

dp[len1][len2]를 출력한다.