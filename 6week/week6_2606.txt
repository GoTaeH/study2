1. 문제 해결 기법
    - 어떤 한 컴퓨터(1번 컴퓨터)와 네트워크 상에서 연결되어 있는 모든 컴퓨는 한 네트워크가 바이러스가 걸리면 
    모두 전파되어 바이러스에 걸리게 된다. 1번 컴퓨터가 바이러스에 걸렸을 때 바이러스에 걸리게 되는 컴퓨터의 수를 
    구하는 문제이다. 이 문제는 컴퓨터 연결을 그래프로 생각하여 연결된 곳을 찾아서 카운트++를 해야하기 때문에 
    dfs나 bfs를 사용해야 한다. 따라서 dfs를 사용해서 문제를 해결했다.

2. 논리 구현
int map[][], boolean visited[], int n, pair, num, int cnt=0을 선언한다.
// main
버퍼리더 br을 선언한다.
n(컴퓨터 수)을 br로 받는다.
pair(직접 연결 되어있는 컴퓨터 쌍의 수)를 br로 받는다.
num = 1 로 정의한다.    // 1번 컴퓨터
map을 새로운 2차원 int 배열로 정의한다. 크기는 [n+1][n+1]
visited를 새로운 1차원 boolean로 정의한다. 크기는 [n+1]

for 반복문으로 다음을 반복한다. (int i <- 0~pair-1)     // 그래프 구성
    StringTokenizer st를 선언한다.
    int a를 st.nextToken()으로 입력받은 것의 토큰으로 정의한다.
    int b를 입력 받은 것의 토큰으로 정의한다.
    map[a][b] = map[b][a] = 1   
dfs(1)을 출력한다.

// int dfs(int i)   1번과 연결된 컴퓨터 찾기
visited[i] 를 true로 선언한다.
for 반복문으로 다음을 반복한다. (int j <- 1~n)
    if(map[i][j] == 1 && visited[j] == false)
        dfs(j)
return cnt  // 카운트 값을 리턴한다.