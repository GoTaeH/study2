1. 문제 해결 기법
    - 가중치가 없는 방향 그래프 G의 모든 정점 (i, j)에 대해 i에서 j로 가는 길이가 양수인 경로가 있다면 
    i번째 줄의 j번째 숫자를 1로 표시하고, 없다면 0으로 출력하는 문제이다. i에서 j로 갈 수 있는 경로가 있는 것은 
    map[i][k] == 1 && map[k][j] == 1일때 map[i][j] = 1인 플로이드 워셜을 사용하여 판단할 수 있다. // 이 경우를 제외한 
    다른 경우는 모두 0

2. 논리 구현
버퍼리더 br을 선언한다.
int N을 입력받아 정의한다. // 정점의 개수
int 타입의 2차원 배열 map을 N*N 크기로 선언한다. 
for 반복문으로 다음을 반복한다. (int i <- 0~N-1)
    StringTokenizer st 선언한다.
    for 반복문으로 다음을 반복한다. (int j <- 0~N-1)
        map[i][j]에 st.nextToken() 값을 넣는다.
for 반복문으로 다음을 반복한다. (int k <- 0~N-1)    // 거쳐가는 정점 : k
    for 반복문으로 다음을 반복한다. (int i <- 0~N-1)
        for 반복문으로 다음을 반복한다. (int j <- 0~N-1)
            if(map[i][k] == 1 && map[k][j] == 1)    // 플로이드 워셜
                map[i][j] = 1   // i에서 j로 가는 길이가 양수인 경로가 있다

StringBuilder sb 선언한다.
for 반복문으로 다음을 반복한다. (int i <- 0~N-1)
    for 반복문으로 다음을 반복한다. (int j <- 0~N-1)
        sb.append(map[i][j] + " ") // map의 i번째 줄의 j번째 숫자에 결과 삽입
    sb.append("\n") // 행렬의 다음 행으로
sb를 출력한다.