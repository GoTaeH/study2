1. 문제 해결 기법
    - 케빈 베이컨의 6단계 법칙을 이용하여 케빈 베이컨의 수가 가장 작은 
    사람을 구하는 문제이다. 유저의 수 N과 친구 관계의 수 M이 주어지고, M개의 줄 만큼 
    친구 관계가 주어지는데, 이는 그래프로 표현할 수 있다. 또한 관계를 통해 케빈 베이컨을 
    구하기 위해서 플로이드 워셜을 사용하여 문제를 해결한다. //W[i][j] = min(W[i][k] + W[k][j] , W[i][j])

2. 논리 구현
버퍼리더 br을 선언한다.
StringTokenizer st를 선언하고, br.readLine()으로 입력받은 것을 토큰화한다.
int N을 정의한다. // 유저의 수
int M을 정의한다. // 관계의 수
int[][] graph 의 크기를 int[N+1][N+1]로 정의한다.

for 반복문으로 다음을 반복한다. (int i <- 1~N)
    Arrays.fill(graph[i], N) // 인접하지 않은 노드로 가는 비용의 초기값 : 무한대
    graph[i][i] = 0
for 반복문으로 다음을 반복한다. (int i <- 0~M-1)
    st를 다시 선언한다.
    int A를 정의한다. // 친구관계 A
    int B를 정의한다. // 친구관계 B
    graph[A][B] = 1, graph[B][A]=1  // 인접 노드 비용 : 1, 무방향 그래프로 생성
floyd(graph)를 출력한다.

//floyd(int[][] arr)
int[] bacon을 arr.length크기로 정의한다. // 각 유저의 케빈 베이컨 수
for (int M <- 1~arr.length-1)
    for (int A <- 1~arr.length-1)
        for (int B <- 1~arr.length-1)
            if(현재arr[A][B]에 저장된 값보다 arr[A][M]+arr[M][B]가 더 작다면)
                arr[A][B]를 그 값으로 바꿔준다.

int min = 1; // 케빈 베이컨 수 가장 작은 사람의 번호 저장
for (int i <- 1~bacon.length-1)
    for (int j <- 1~bacon.length-1)
        if(i와 j가 다르다면)
            케빈 베이컨 수 += arr[i][j]
    min = (bacon[i]< bacon[min]) ? i : min  // bacon[i]가 bacon[min]보다 작다면 i, 크다면 min
min 리턴