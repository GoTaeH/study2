1. 문제 해결 기법
    - 건물을 짓는 순서가 주어지고 건설을 시작하여 완성이 될 때까지 딜레이가 존재하는 ACM Craft대회에 참가하는 
    백준이를 위해 특정 건물을 가장 빨리 지을 때까지의 최소시간을 알아내는 문제이다. 또한 1번 건물이 완성되었다면 
    2, 3번 건물 건설을 시작할 수 있고, 2, 3번이 모두 완성되면 4번을 시작할 수 있다는 규칙이 있다. 이는 위상정렬 
    문제로 위상정렬하여 dp를 적용하여 해결한다.

2. 논리 구현
static int N,K, int[] time을 선언한다.
// main
버퍼리더 br을 선언한다.
StringTokenizer st를 선언한다.
int 타입 T를 선언하고 입력받는다. // 테스트 케이스 개수
while(T가 0보다 큰 동안)
    st를 br로 입력받아 토큰으로 나눈 것으로 정의한다.
    N, K를 토큰으로 정의한다.
    time을 N + 1 크기로 정의한다.
    건물을 연결한 것을 저장할 배열 list를 선언한다. // ArrayList , N크기
    for 반복문으로 다음을 반복한다. (int i <- 0~N-1)
        list[i]에 새로운 ArrayList를 선언한다.
        time[i]을 입력 받는다.  // 건설 시간
    for 반복문으로 다음을 반복한다. (int i <- 0~K-1)
        st로 다시 입력받은 내용을 토큰으로 나눈다.
        int타입의 X와 Y를 토큰으로 정의한다. // 건설 순서 X, Y(X를 지은 다음 Y를 지을 수 있다)
        list[X-1].add(Y-1)  // 그래프 연결
        link[Y-1]++
    int타입의 W를 입력받는다. // 목표 건물 번호
    topological()를 이용해 결과를 출력한다.     // link, list, W + "\n"
// int topological(int[] link, ArrayList<Integer>[] list, int W)
    LinkedList인 큐 queue를 선언한다.
    int 타입의 1차원 배열 res를 N+1크기로 정의한다. // 결과 배열
    for 반복문으로 다음을 반복한다. (int i <- 0~N-1)    // 건물 건설 걸리는 시간
        if(link[i] == 0)
            res[i] = time[i]
            queue.offer(i)  // 큐에 추가
    while(큐가 비어있지 않는 동안)
        int node를 queue.poll()로 정의한다. // 큐 맨 앞값 반환 후 삭제, 비어있다면 null
        for 반복문으로 다음을 반복한다.(int i : list[node])
            res[i] = Math.max(res[i], res[node]+time[i])    // 이전 건물 건설까지의 소요시간 + 현재 건물 건설 소요시간
            link[i]--
            if(link[i]가 0이라면)
                queue.offer(i)
    res[W-1]을 리턴한다.