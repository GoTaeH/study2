1. 문제 해결 기법
    - 친구 관계 트리가 주어졌을 때 모든 개인이 새로운 아이디어를 수용하기 위해 필요한 최소 얼리 어답터의 
    수를 구하는 문제이다. 이 문제에서 얼리 어답터가 아닌 사람은 자신의 모든 친구들이 얼리 어답터일때만 아이디어를 
    받아들인다고 한다. 친구 관계 트리에서 문제를 해결해야하므로, 최소의 얼리어답터 수는 트리에서의 dp로 해결할 수 있다.

2. 논리 구현
static int N, ArrayList<ArrayList<Integer>> tree, int[][] dp를 선언한다.
// main
버퍼리더 br을 선언하여 입력 받는다.
N을 입력받은 integer로 정의한다.
dp의 크기를 N+1,2로 설정한다.   // 얼리어답터이다. 아니다 2가지
for 반복문으로 다음을 반복한다. (int i <- 0~N)
    tree에 ArrayList<>()를 추가한다.
for 반복문으로 다음을 반복한다. (int i <- 0~N-2)
    StringTokenizer st를 선언하여 입력 받은 것을 토큰화한다.
    int u, v를 정의한다. // 친구관계트리의 에지 나타내는 정수
    u와 v를 연결하여 관계를 가지도록 한다.
dp(1, -1)
Math.min(dp[1][0], dp[1][1])를 출력한다.
// static void dp(int num, itn parent)
dp[num][0] 을 0으로 정의한다.
dp[num][1] 을 1로 정의한다.
for(int next : tree.get(num))   // 사이클이 존재하지 않고
    if(next가 parent가 아니라면)    // next = parent면 단말노드
        dp(next, num)
        dp[num][0] += dp[next][1]
        dp[num][1] += Math.min(dp[next][0], dp[next][1])