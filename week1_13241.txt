1. 문제 해결 기법
    - 100000000보다 작은 두 수 A, B를 입력 받아 두 수의 최소공배수를 구하는 문제이다.
    최소공배수는 A, B를 최대공약수(GCD)로 나눈 나머지를 곱한 것으로 구할 수 있다. 
    따라서 최대공약수를 구하는 유클리드 호제법을 사용하고, 그 결과를 이용해 최소공배수를 구한다.
    // 유클리드 호제법 예시 : gcd(33, 12) -> gcd(12, 9) -> gcd(9, 3) -> gcd(3, 0)

2. 논리 구현
Scanner를 선언한다.
long A, B를 선언하고 입력 받는다. (100000000정도의 수를 입력받기 위해 long 사용, sc.nextLong())
최소공배수를 구하여 출력한다. (A * B / gcd(A, B))
// A * B = 최대공약수 * 최소공배수 이므로 최소공배수는 A * B / 최대공약수가 된다.

// gcd 메소드 (long gcd(long A, long B))
    while문으로 B가 0이 아닐 때 동안 다음을 반복한다. (B != 0 <- 나머지가 0이 되면 최대공약수)
        long r을 A를 B로 나눈 나머지로 정의한다. (long r = A % B)
        A = B   // B 위치의 값을 A로 두고 다시 나누는 것을 반복
        B = r   // 첫 번째 B 이후, B의 위치에는 A % B의 값이 들어가야 한다.
    return A (이때의 B는 0, -> gcd(최대공약수, 0))