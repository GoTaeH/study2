1. 문제 해결 기법
    - 알파벳, 공백, 소괄호, 대괄호로 이루어진 문자열을 읽어 소괄호와 대괄호가 짝을 이루고 있는지 확인하는 문제이다.
    (문자열은 .으로 끝난다.) 괄호가 짝을 이루는지 확인하기 위해서 한 쪽에서 삽입 및 삭제가 일어나는 스택을 사용한다.
    (왼쪽 소괄호/대괄호를 삽입하고, 문자열에서 오른쪽 소괄호/대괄호가 있으면 삭제한다.)

2. 논리 구현
Scanner를 선언한다.
문자열 s를 정의한다. (String s)

while 반복문을 사용하여 다음을 반복한다. (while(true))
    문자열 s를 Scanner로 입력 받는다. (sc.nextLine())
    if 문자열에서 "."이 있으면 break한다. (s.equals("."))
    else 짝이 맞는지 아닌지 확인한 결과를 출력한다. (check 메소드 사용)

// check 메소드
타입이 Character인 스택을 선언한다.
for 반복문으로 문자열 끝까지 다음을 반복한다. (i <- 0 ~ s.length()-1)
    char c를 문자열의 문자로 정의한다. (s.charAt(i))
    if c가 '('이거나 '['라면 다음을 반복한다. (c == '(' || c == '[')
        스택에 c를 push한다.
    else if c가 ')'라면 다음을 반복한다.
        if 스택이 비었거나 스택의 맨 위 값이 '('가 아니라면 (stack.empty() || stack.peek() != '(')
            return "no" 
        else 스택 값을 삭제한다. (stack.pop())
    else if c가 ']'라면 다음을 반복한다.
        if 스택이 비었거나 스택의 맨 위 값이 '['가 아니라면 (stack.empty() || stack.peek() != '[')
            return "no"
        else 스택 값을 삭제한다. (stack.pop())

if (for 반복문이 끝난 후)스택이 비었다면 return "yes"  (stack.isEmpty())
else 비어있지 않다면 return "no"