1. 문제 해결 기법
    - N x N 크기의 표에 수를 채우고, (x1, y1)부터 (x2, y2)까지 합을 구하는 문제이다.  (x : 행 y : 열)
     합을 구해야 하는 횟수 M은 표에 수를 채운 뒤, M번 x1, y1, x2, y2가 입력된다. 
     누적 합을 구해야 하는 문제이므로, dp를 사용하여 저장해가며 진행하는 방식으로 해결한다.
     // 2차원 배열에서 구간합 : dp[행][열] = dp[행-1][열] + dp[행][열-1] - dp[행-1][열-1]

2. 논리 구현
버퍼리더 br을 선언한다.
버퍼로 입력 받은 것을 하나씩 나누기 위해 StringTokenizer st를 선언한다.

표의 크기를 나타내는 N을 int 타입으로 정의한다. Integer.parseInt(st.nextToken())
합을 구해야 하는 횟수인 M을 int 타입으로 정의한다. Integer.parseInt(st.nextToken())

타입이 int인 2차원 배열 graph를 정의한다.   // 배열의 크기는 int [N+1][N+1] 
타입이 int인 2차원 배열 dp를 정의한다.  // 배열의 크기는 int[N+1][N+1]

for 반복문으로 다음을 반복한다. (int i <- 1~N)
    st를 StringTokenizer을 사용해 읽은 문자열의 토큰으로 정의한다.
    for 반복문으로 다음을 반복한다. (int j <- 1~N)
        graph[i][j]에 Integer타입의 토큰을 넣는다.  // 표에 수 채워 넣는 과정
        dp[i][j] 에 dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + graph[i][j]를 더한다.  // 누적

for 반복문으로 다음을 반복한다. (int i <- 1~M) 입력된 M(합 구하는 횟수)만큼 반복
    st를 StringTokenizer을 사용해 읽은 문자열의 토큰으로 정의한다.
    타입이 int인 x1을 정의한다. Integer.parseInt(st.nextToken())
    타입이 int인 y1을 정의한다. Integer.parseInt(st.nextToken())
    타입이 int인 x2를 정의한다. Integer.parseInt(st.nextToken())
    타입이 int인 y2를 정의한다. Integer.parseInt(st.nextToken())
    (x1,y1)부터 (x2, y2)까지의 합을 구해서 출력한다. // dp[x2][y2] - dp[x2][y1-1] - dp[x1-1][y2] + dp[x1-1][y1-1]
    // dp[x2][y2]이 (1, 1)부터 (x2, y2)까지의 합이므로, dp[x2][y2]에서 - dp[x2][y1-1] - dp[x1-1][y2]를 하고, 중복되어 빠진 부분을 더해준다. + dp[x1-1][y1-1]